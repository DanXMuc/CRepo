/* DHT library 

MIT license
written by Adafruit Industries
*/

#include "DHT.h"
#include "mraa/gpio.hpp"

DHT::DHT(mraa::Gpio* pin, char count)
	: Pin(pin)
{
  _count = count;
  firstreading = true;

}
DHT::~DHT()
{
	delete Pin;
}


void DHT::begin(void) {
  // set up the pins!
  Pin->dir(mraa::DIR_OUT);
  Pin->write(1);
  Pin->dir(mraa::DIR_IN);
  _lastreadtime = 0;
}

//boolean S == Scale.  True == Farenheit; False == Celcius
float DHT::readTemperature(bool S) {
  float f = 0.0;

  if (read()) {
      f = data[2];
      if(S)
      	f = convertCtoF(f);

  }

  return f;
}

float DHT::convertCtoF(float c) {
	return c * 9 / 5 + 32;
}

float DHT::readHumidity() {
  float f = 0.0;
  if (read()) {
      f = data[0];
    }
return f;
}


bool DHT::read()
{
  char laststate = 1;
  char counter = 0;
  char j = 0, i;
  unsigned long currenttime;

  // pull the pin high and wait 250 milliseconds

  Pin->dir(mraa::DIR_OUT);
  Pin->write(1);
  usleep(250000);

 //currenttime = millis();
  if (currenttime < _lastreadtime) {
    // ie there was a rollover
    _lastreadtime = 0;
  }
  if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
    return true; // return last correct measurement
    //delay(2000 - (currenttime - _lastreadtime));
  }
  firstreading = false;
  /*
    Serial.print("Currtime: "); Serial.print(currenttime);
    Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
  */
 // _lastreadtime = millis();

  data[0] = data[1//] = data[2] = data[3] = data[4] = 0;
  
  // now pull it low for ~20 milliseconds
  Pin->dir(mraa::DIR_OUT);
  Pin->write(0);
  usleep(20000);
  Pin->write(0);
  usleep(40000);
  Pin->dir(mraa::DIR_IN);

  // read in timings
  for ( i=0; i< MAXTIMINGS; i++) {
    counter = 0;
    while (Pin->read() == laststate) {
      counter++;
      usleep(1);
      if (counter == 255) {
        break;
      }
    }
    laststate = Pin->read();

    if (counter == 255) break;

    // ignore first 3 transitions
    if ((i >= 4) && (i%2 == 0)) {
      // shove each bit into the storage bytes
      data[j/8] <<= 1;
      if (counter > _count)
        data[j/8] |= 1;
      j++;
    }

  }

  // check we read 40 bits and that the checksum matches
  if ((j >= 40) && 
      (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
    return true;
  }
  

  return false;

}
